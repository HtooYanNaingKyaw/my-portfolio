{
  "posts": [
    {
      "id": 1,
      "title": "Getting Started with React Hooks",
      "slug": "getting-started-with-react-hooks",
      "excerpt": "Learn how to use React Hooks to manage state and side effects in functional components. This comprehensive guide covers useState, useEffect, and custom hooks.",
      "content": "# Getting Started with React Hooks\n\nReact Hooks have revolutionized how we write React components. They allow us to use state and other React features in functional components, making our code more readable and maintainable.\n\n## What are React Hooks?\n\nHooks are functions that let you \"hook into\" React state and lifecycle features from function components. They were introduced in React 16.8 and have become the standard way to write React components.\n\n## Basic Hooks\n\n### useState\n\nThe `useState` hook allows you to add state to functional components:\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n### useEffect\n\nThe `useEffect` hook lets you perform side effects in functional components:\n\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    // Fetch data when component mounts\n    fetch('/api/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []); // Empty dependency array means this effect runs once\n\n  return <div>{data ? data.title : 'Loading...'}</div>;\n}\n```\n\n## Custom Hooks\n\nYou can create your own hooks to reuse stateful logic between components:\n\n```javascript\nfunction useWindowSize() {\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return size;\n}\n```\n\n## Best Practices\n\n1. **Only call hooks at the top level** - Don't call hooks inside loops, conditions, or nested functions\n2. **Only call hooks from React functions** - Call hooks from React function components or custom hooks\n3. **Use the dependency array correctly** - Always include all dependencies in the useEffect dependency array\n\n## Conclusion\n\nReact Hooks provide a powerful and flexible way to manage state and side effects in functional components. They make your code more readable, testable, and maintainable.\n\nStart using hooks in your next React project and experience the difference!",
      "author": "Htoo Yan Naing Kyaw",
      "publishedAt": "2024-01-15",
      "updatedAt": "2024-01-15",
      "readTime": "8 min read",
      "category": "React",
      "tags": ["React", "JavaScript", "Hooks", "Frontend"],
      "featured": true,
      "image": "/images/blog/react-hooks.jpg",
      "status": "published",
      "seo": {
        "title": "Getting Started with React Hooks - Complete Guide",
        "description": "Learn how to use React Hooks to manage state and side effects in functional components. This comprehensive guide covers useState, useEffect, and custom hooks.",
        "keywords": ["React", "Hooks", "JavaScript", "Frontend", "useState", "useEffect"]
      }
    },
    {
      "id": 2,
      "title": "Building a RESTful API with Node.js and Express",
      "slug": "building-restful-api-nodejs-express",
      "excerpt": "Step-by-step guide to creating a robust RESTful API using Node.js, Express, and MongoDB. Includes authentication, validation, and error handling.",
      "content": "# Building a RESTful API with Node.js and Express\n\nCreating a RESTful API is a fundamental skill for any full-stack developer. In this guide, we'll build a complete API using Node.js, Express, and MongoDB.\n\n## Project Setup\n\nFirst, let's set up our project structure:\n\n```bash\nmkdir api-project\ncd api-project\nnpm init -y\nnpm install express mongoose dotenv bcryptjs jsonwebtoken cors\n```\n\n## Basic Express Server\n\n```javascript\nconst express = require('express');\nconst cors = require('cors');\nrequire('dotenv').config();\n\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\nconst PORT = process.env.PORT || 5000;\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n## Database Connection\n\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', () => {\n  console.log('Connected to MongoDB');\n});\n```\n\n## User Model\n\n```javascript\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  }\n}, {\n  timestamps: true\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n  \n  this.password = await bcrypt.hash(this.password, 12);\n  next();\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n```\n\n## Authentication Middleware\n\n```javascript\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nconst auth = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization').replace('Bearer ', '');\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findOne({ _id: decoded.id });\n\n    if (!user) {\n      throw new Error();\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).send({ error: 'Please authenticate.' });\n  }\n};\n\nmodule.exports = auth;\n```\n\n## Routes\n\n```javascript\nconst express = require('express');\nconst User = require('../models/User');\nconst auth = require('../middleware/auth');\nconst router = express.Router();\n\n// Register user\nrouter.post('/register', async (req, res) => {\n  try {\n    const user = new User(req.body);\n    await user.save();\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);\n    res.status(201).send({ user, token });\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Login user\nrouter.post('/login', async (req, res) => {\n  try {\n    const user = await User.findByCredentials(req.body.email, req.body.password);\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);\n    res.send({ user, token });\n  } catch (error) {\n    res.status(400).send({ error: 'Invalid login credentials' });\n  }\n});\n\n// Get user profile (protected route)\nrouter.get('/profile', auth, async (req, res) => {\n  res.send(req.user);\n});\n\nmodule.exports = router;\n```\n\n## Error Handling\n\n```javascript\napp.use((error, req, res, next) => {\n  console.error(error.stack);\n  res.status(500).send('Something broke!');\n});\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).send('Route not found');\n});\n```\n\n## Environment Variables\n\nCreate a `.env` file:\n\n```env\nPORT=5000\nMONGODB_URI=mongodb://localhost:27017/your-database\nJWT_SECRET=your-secret-key\n```\n\n## Testing the API\n\nYou can test your API using tools like Postman or curl:\n\n```bash\n# Register a new user\ncurl -X POST http://localhost:5000/api/users/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"John Doe\",\"email\":\"john@example.com\",\"password\":\"password123\"}'\n\n# Login\ncurl -X POST http://localhost:5000/api/users/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"john@example.com\",\"password\":\"password123\"}'\n```\n\n## Conclusion\n\nThis is a basic but complete RESTful API setup. You can extend it by adding more models, routes, and features like file uploads, email verification, and rate limiting.\n\nRemember to always validate input data, handle errors properly, and implement security best practices in production applications.",
      "author": "Htoo Yan Naing Kyaw",
      "publishedAt": "2024-01-10",
      "updatedAt": "2024-01-10",
      "readTime": "12 min read",
      "category": "Backend",
      "tags": ["Node.js", "Express", "MongoDB", "API", "Backend"],
      "featured": true,
      "image": "/images/blog/nodejs-api.jpg",
      "status": "published",
      "seo": {
        "title": "Building a RESTful API with Node.js and Express - Complete Guide",
        "description": "Step-by-step guide to creating a robust RESTful API using Node.js, Express, and MongoDB. Includes authentication, validation, and error handling.",
        "keywords": ["Node.js", "Express", "MongoDB", "API", "Backend", "REST"]
      }
    }
  ],
  "categories": [
    {
      "id": 1,
      "name": "React",
      "slug": "react",
      "description": "Articles about React development, hooks, and best practices"
    },
    {
      "id": 2,
      "name": "Backend",
      "slug": "backend",
      "description": "Server-side development with Node.js, Express, and databases"
    },
    {
      "id": 3,
      "name": "CSS",
      "slug": "css",
      "description": "CSS tutorials, layout techniques, and styling best practices"
    },
    {
      "id": 4,
      "name": "Deployment",
      "slug": "deployment",
      "description": "Deploying applications to various platforms and services"
    },
    {
      "id": 5,
      "name": "TypeScript",
      "slug": "typescript",
      "description": "TypeScript tutorials and best practices for React developers"
    }
  ],
  "tags": [
    "React",
    "JavaScript",
    "TypeScript",
    "Node.js",
    "Express",
    "MongoDB",
    "CSS",
    "Grid",
    "Flexbox",
    "API",
    "Backend",
    "Frontend",
    "Hooks",
    "Deployment",
    "Vercel",
    "Best Practices"
  ]
}
